package gaiasim.scheduler;

// The scheduler for Siphon
// Paper ref: https://www.usenix.org/system/files/conference/atc18/atc18-liu.pdf

// How to implement Siphon scheduler?
// Use Oracle FCT to sort Coflows
// Use LFGF to schedule flows of a Coflow
// After scheduling, run the bottleneck shifting algorithm for multipath


import gaiasim.mmcf.MMCFOptimizer;
import gaiasim.network.*;

import java.util.*;

public class SiphonScheduler extends BaselineScheduler {

    int monteCarloDepth = 10; // default depth = 10
    int multipathIterations = 10; // default, iterate the process of shifting traffic 10 times
    Map<Flow, Double> oracleFCT;

    public SiphonScheduler(NetGraph net_graph, int monteCarloDepth, String oracleFCT_filename) {
        super(net_graph);
        this.monteCarloDepth = monteCarloDepth;
        readOracleFCT(oracleFCT_filename);
    }

    // method called in constructor should be final.
    private final void readOracleFCT(String oracleFCT_filename) {
        // TODO: read in a list of flow completion time, as the oracleFCT

        // The oracle FCT should be a csv file generated by the per-flow solution

    }

    @Override
    public HashMap<String, Flow> schedule_flows(HashMap<String, Coflow> coflows, long timestamp) throws Exception {
        flows_.clear();

        // Hashmap or list?
//        HashMap<String, Coflow> coflows_to_schedule = (HashMap<String, Coflow>) coflows.clone();
        Collection<Coflow> coflows_to_schedule = coflows.values();

        while (!coflows_to_schedule.isEmpty()){

            // TODO Use Oracle FCT to sort Coflows to find the next coflow to schedule
            Coflow cf_to_schedule = findNextCoflow(coflows_to_schedule);

            // How to sort?

            // TODO LFGF to schedule flows of a Coflow

            // TODO After scheduling, run the bottleneck shifting algorithm for multipath

            // TODO remove the schedule coflow from the collection and run again

        }



        return flows_;
    }

    private Coflow findNextCoflow(Collection<Coflow> coflows_to_schedule) {

        // Monte Carlo here
        int depth = Math.min(monteCarloDepth, coflows_to_schedule.size());



        return null;
    }

}
