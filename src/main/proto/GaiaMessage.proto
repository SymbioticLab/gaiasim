syntax = "proto3";

option java_package = "gaiasim.gaiaprotos";
option java_outer_classname = "GaiaMessageProtos";

//service GAIA {
//    rpc controlFlow(stream FlowUpdate) returns (stream StatusUpdate) {}
//}
//
//service PAReport {
//    rpc getFlowRules(PAM_REQ) returns (stream PAMessage) {}
//}

service SendingAgentService {
//    rpc StartFlow (FlowUpdate) returns (stream StatusReport) {}
    rpc PrepareConnections (PAM_REQ) returns (stream PAMessage) {}
    rpc ChangeFlow (stream FlowUpdate) returns (FUM_ACK) {}
    rpc StartHeartBeat (Exp_CTRL) returns (Exp_CTRL_ACK) {}
}

service MasterService {
    rpc UpdateFlowStatus (stream StatusReport) returns (FlowStatus_ACK) {}
}

message StatusReport {
    message FlowStatus {
        string id = 1;
        double transmitted = 2;
        bool finished = 3;
    }

    repeated FlowStatus status = 1;
}

message FlowUpdate {

    message PathRateEntry {
        int32 pathID = 1;
        double rate = 2;
    }

    message FlowUpdateEntry {
        double remainingVolume = 1;
        string flowID = 2;
        enum Operation{
            START = 0;
            CHANGE = 1;
            PAUSE = 2;
        }
        Operation op = 3;
        // path to rate mapping
        repeated PathRateEntry pathToRate = 4;
//        map <int32, double> pathToRate = 3;
    }
    
    message RAUpdateEntry {
        string raID = 1;
        repeated FlowUpdateEntry fges = 2;
    }

    repeated RAUpdateEntry RAUpdate = 1;
    // Collectors.groupingBy() should enforce that multiple RAUEntry all have different raID
}


message PAMessage {
    string sa_id = 1;
    string ra_id = 2;
    int32 path_id = 3;
    int32 port_no = 4;
}

message PAM_REQ {
//    bool finished = 1;
}

message FUM_ACK {}

message FlowStatus_ACK {}

message Exp_CTRL{}

message Exp_CTRL_ACK{}


